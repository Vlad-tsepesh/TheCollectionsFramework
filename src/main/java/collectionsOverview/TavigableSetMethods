E ceiling(E obj)
    Searches the set for the smallest element e such that e >= obj.
    If such an element is found, it is returned. Otherwise, null is
    returned.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.ceiling(6));  // Output: 7
    System.out.println(set.ceiling(10)); // Output: null


Iterator<E> descendingIterator( )
    Returns an iterator that moves from the greatest to least. In
    other words, it returns a reverse iterator.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    Iterator<Integer> iterator = set.descendingIterator();
    while (iterator.hasNext()) {
        System.out.println(iterator.next());  // Output: 9, 7, 5, 3, 1
    }


NavigableSet<E> descendingSet( )
    Returns a NavigableSet that is the reverse of the invoking set.
    The resulting set is backed by the invoking set.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    NavigableSet<Integer> descSet = set.descendingSet();
    System.out.println(descSet);  // Output: [9, 7, 5, 3, 1]


E floor(E obj)
    Searches the set for the largest element e such that e <= obj.
    If such an element is found, it is returned. Otherwise, null is
    returned.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.floor(6));  // Output: 5
    System.out.println(set.floor(1));  // Output: 1
    System.out.println(set.floor(0));  // Output: null


NavigableSet<E> headSet(E upperBound, boolean incl)
    Returns a NavigableSet that includes all elements from the
    invoking set that are less than upperBound. If incl is true, then
    an element equal to upperBound is included. The resulting set is
    backed by the invoking set.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.headSet(7, true));  // Output: [1, 3, 5, 7]
    System.out.println(set.headSet(7, false)); // Output: [1, 3, 5]


E higher(E obj)
    Searches the set for the largest element e such that e > obj. If
    such an element is found, it is returned. Otherwise, null is
    returned.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.higher(6));  // Output: 7
    System.out.println(set.higher(10)); // Output: null


E lower(E obj)
    Searches the set for the largest element e such that e < obj. If
    such an element is found, it is returned. Otherwise, null is
    returned.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.lower(6));  // Output: 5
    System.out.println(set.lower(1));  // Output: null


E pollFirst( )
    Returns the first element, removing the element in the process.
    Because the set is sorted, this is the element with the least value.
    null is returned if the set is empty.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.pollFirst()); // Output: 1
    System.out.println(set);             // Output: [3, 5, 7, 9]


E pollLast( )
    Returns the last element, removing the element in the process.
    Because the set is sorted, this is the element with the greatest
    value. null is returned if the set is empty.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.pollLast());  // Output: 9
    System.out.println(set);             // Output: [1, 3, 5, 7]


NavigableSet<E>subSet(E lowerBound, boolean lowIncl, E upperBound, boolean highIncl)
    Returns a NavigableSet that includes all elements from
    the invoking set that are greater than lowerBound and less
    than upperBound. If lowIncl is true, then an element equal to
    lowerBound is included. If highIncl is true, then an element equal
    to upperBound is included. The resulting set is backed by the
    invoking set.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.subSet(3, true, 7, false));  // Output: [3, 5]


NavigableSet<E> tailSet(E lowerBound, boolean incl)
    Returns a NavigableSet that includes all elements from the
    invoking set that are greater than lowerBound. If incl is true, then
    an element equal to lowerBound is included. The resulting set is
    backed by the invoking set.

    NavigableSet<Integer> set = new TreeSet<>(Arrays.asList(1, 3, 5, 7, 9));
    System.out.println(set.tailSet(5, true));  // Output: [5, 7, 9]
    System.out.println(set.tailSet(5, false)); // Output: [7, 9]
