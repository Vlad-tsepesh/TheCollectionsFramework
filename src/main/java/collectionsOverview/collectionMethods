boolean add(E obj)
    Adds obj to the invoking collection. Returns true if
    obj was added to the collection. Returns false if obj is
    already a member of the collection and the collection
    does not allow duplicates.

    Set<Integer> set = new HashSet<>();
    System.out.println(set.add(1));  // Output: true
    System.out.println(set.add(1));  // Output: false (duplicate)


boolean addAll(Collection<? extends E> c)
    Adds all the elements of c to the invoking collection.
    Returns true if the collection changed (i.e., the
    elements were added). Otherwise, returns false

    Set<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> set2 = new HashSet<>(Arrays.asList(3, 4, 5));
    System.out.println(set1.addAll(set2));  // Output: true
    System.out.println(set1);  // Output: [1, 2, 3, 4, 5]


void clear( )
    Removes all elements from the invoking collection

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    set.clear();
    System.out.println(set);  // Output: []


boolean contains(Object obj)
    Returns true if obj is an element of the invoking
    collection. Otherwise, returns false.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    System.out.println(set.contains(2));  // Output: true
    System.out.println(set.contains(4));  // Output: false


boolean containsAll(Collection<?> c
    Returns true if the invoking collection contains all
    elements of c. Otherwise, returns false.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> otherSet = new HashSet<>(Arrays.asList(1, 2));
    System.out.println(set.containsAll(otherSet));  // Output: true


boolean equals(Object obj)
    Returns true if the invoking collection and obj are
    equal. Otherwise, returns false.

    Set<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> set2 = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> set3 = new HashSet<>(Arrays.asList(3, 2, 1));
    System.out.println(set1.equals(set2));  // Output: true
    System.out.println(set1.equals(set3));  // Output: true


int hashCode( )
    Returns the hash code for the invoking collection

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    System.out.println(set.hashCode());  // Output: Some integer value


Iterator<E> iterator( )
    Returns an iterator for the invoking collection

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Iterator<Integer> iterator = set.iterator();
    while (iterator.hasNext()) {
        System.out.println(iterator.next());  // Output: 1, 2, 3 (order may vary)
    }


default Stream<E> parallelStream( )
    Returns a stream that uses the invoking collection
    as its source for elements. If possible, the stream
    supports parallel operations. (Added by JDK 8.)

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));
    set.parallelStream().forEach(System.out::println);


boolean remove(Object obj)
    Removes one instance of obj from the invoking
    collection. Returns true if the element was removed.
    Otherwise, returns false.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    System.out.println(set.remove(2));  // Output: true
    System.out.println(set);            // Output: [1, 3]


boolean removeAll(Collection<?> c)
    Removes all elements of c from the invoking collection.
    Returns true if the collection changed (i.e., elements
    were removed). Otherwise, returns false.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> otherSet = new HashSet<>(Arrays.asList(2, 3));
    System.out.println(set.removeAll(otherSet));  // Output: true
    System.out.println(set);  // Output: [1]


default boolean removeIf(Predicate<? super E> predicate
    Removes from the invoking collection those elements
    that satisfy the condition specified by predicate. (Added
    by JDK 8.)

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));
    set.removeIf(n -> n % 2 == 0);  // Removes even numbers
    System.out.println(set);  // Output: [1, 3, 5]

boolean retainAll(Collection<?> c)
    Removes all elements from the invoking collection
    except those in c. Returns true if the collection changed
    (i.e., elements were removed). Otherwise, returns false.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Set<Integer> otherSet = new HashSet<>(Arrays.asList(2, 3));
    System.out.println(set.retainAll(otherSet));  // Output: true
    System.out.println(set);  // Output: [2, 3]


int size( )
    Returns the number of elements held in the invoking
    collection.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    System.out.println(set.size());  // Output: 3


default Spliterator<E> spliterator( )
    Returns a spliterator to the invoking collections.
    (Added by JDK 8.)

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Spliterator<Integer> spliterator = set.spliterator();
    spliterator.forEachRemaining(System.out::println);

    Explanation:
    This allows you to use the spliterator() method for performing
    parallel or sequential operations on the collection.


default Stream<E> stream( )
    Returns a stream that uses the invoking collection
    as its source for elements. The stream is sequential.
    (Added by JDK 8.)

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    set.stream().forEach(System.out::println);


Object[ ] toArray( )
    Returns an array that contains all the elements stored
    in the invoking collection. The array elements are
    copies of the collection elements.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Object[] array = set.toArray();
    System.out.println(Arrays.toString(array));  // Output: [1, 2, 3]

    Explanation:
    This method returns an array containing the elements of the collection,
    but without specifying the type of the array.


<T> T[ ] toArray(T array[ ])
    Returns an array that contains the elements of the
    invoking collection. The array elements are copies
    of the collection elements. If the size of array equals
    the number of elements, these are returned in
    array. If the size of array is less than the number
    of elements, a new array of the necessary size is
    allocated and returned. If the size of array is greater
    than the number of elements, the array element
    following the last collection element is set to null.
    An ArrayStoreException is thrown if any collection
    element has a type that is not a subtype of array.

    Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));
    Integer[] array = set.toArray(new Integer[0]);
    System.out.println(Arrays.toString(array));  // Output: [1, 2, 3]

    Explanation:
    This method allows you to specify the type of the array to store the collectionâ€™s elements.
